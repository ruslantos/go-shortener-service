// Code generated by mockery v2.50.0. DO NOT EDIT.

package shorten

import (
	files "github.com/ruslantos/go-shortener-service/internal/files"
	mock "github.com/stretchr/testify/mock"
)

// Mockfile is an autogenerated mock type for the file type
type Mockfile struct {
	mock.Mock
}

type Mockfile_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockfile) EXPECT() *Mockfile_Expecter {
	return &Mockfile_Expecter{mock: &_m.Mock}
}

// WriteEvent provides a mock function with given fields: event
func (_m *Mockfile) WriteEvent(event *files.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for WriteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*files.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockfile_WriteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteEvent'
type Mockfile_WriteEvent_Call struct {
	*mock.Call
}

// WriteEvent is a helper method to define mock.On call
//   - event *files.Event
func (_e *Mockfile_Expecter) WriteEvent(event interface{}) *Mockfile_WriteEvent_Call {
	return &Mockfile_WriteEvent_Call{Call: _e.mock.On("WriteEvent", event)}
}

func (_c *Mockfile_WriteEvent_Call) Run(run func(event *files.Event)) *Mockfile_WriteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*files.Event))
	})
	return _c
}

func (_c *Mockfile_WriteEvent_Call) Return(_a0 error) *Mockfile_WriteEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockfile_WriteEvent_Call) RunAndReturn(run func(*files.Event) error) *Mockfile_WriteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfile creates a new instance of Mockfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfile(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockfile {
	mock := &Mockfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
