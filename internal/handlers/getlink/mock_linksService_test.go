// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package getlink

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// newMocklinksService creates a new instance of mocklinksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocklinksService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocklinksService {
	mock := &mocklinksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocklinksService is an autogenerated mock type for the linksService type
type mocklinksService struct {
	mock.Mock
}

type mocklinksService_Expecter struct {
	mock *mock.Mock
}

func (_m *mocklinksService) EXPECT() *mocklinksService_Expecter {
	return &mocklinksService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type mocklinksService
func (_mock *mocklinksService) Get(ctx context.Context, shortLink string) (string, error) {
	ret := _mock.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, shortLink)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, shortLink)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, shortLink)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocklinksService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mocklinksService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - shortLink
func (_e *mocklinksService_Expecter) Get(ctx interface{}, shortLink interface{}) *mocklinksService_Get_Call {
	return &mocklinksService_Get_Call{Call: _e.mock.On("Get", ctx, shortLink)}
}

func (_c *mocklinksService_Get_Call) Run(run func(ctx context.Context, shortLink string)) *mocklinksService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mocklinksService_Get_Call) Return(s string, err error) *mocklinksService_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mocklinksService_Get_Call) RunAndReturn(run func(ctx context.Context, shortLink string) (string, error)) *mocklinksService_Get_Call {
	_c.Call.Return(run)
	return _c
}
