// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/ruslantos/go-shortener-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLinksStorage creates a new instance of MockLinksStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLinksStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLinksStorage {
	mock := &MockLinksStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLinksStorage is an autogenerated mock type for the LinksStorage type
type MockLinksStorage struct {
	mock.Mock
}

type MockLinksStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLinksStorage) EXPECT() *MockLinksStorage_Expecter {
	return &MockLinksStorage_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) AddLink(ctx context.Context, link models.Link, userID string) (models.Link, error) {
	ret := _mock.Called(ctx, link, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 models.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Link, string) (models.Link, error)); ok {
		return returnFunc(ctx, link, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Link, string) models.Link); ok {
		r0 = returnFunc(ctx, link, userID)
	} else {
		r0 = ret.Get(0).(models.Link)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Link, string) error); ok {
		r1 = returnFunc(ctx, link, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinksStorage_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type MockLinksStorage_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - ctx
//   - link
//   - userID
func (_e *MockLinksStorage_Expecter) AddLink(ctx interface{}, link interface{}, userID interface{}) *MockLinksStorage_AddLink_Call {
	return &MockLinksStorage_AddLink_Call{Call: _e.mock.On("AddLink", ctx, link, userID)}
}

func (_c *MockLinksStorage_AddLink_Call) Run(run func(ctx context.Context, link models.Link, userID string)) *MockLinksStorage_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Link), args[2].(string))
	})
	return _c
}

func (_c *MockLinksStorage_AddLink_Call) Return(link1 models.Link, err error) *MockLinksStorage_AddLink_Call {
	_c.Call.Return(link1, err)
	return _c
}

func (_c *MockLinksStorage_AddLink_Call) RunAndReturn(run func(ctx context.Context, link models.Link, userID string) (models.Link, error)) *MockLinksStorage_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// AddLinkBatch provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) AddLinkBatch(ctx context.Context, links []models.Link, userID string) ([]models.Link, error) {
	ret := _mock.Called(ctx, links, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddLinkBatch")
	}

	var r0 []models.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Link, string) ([]models.Link, error)); ok {
		return returnFunc(ctx, links, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Link, string) []models.Link); ok {
		r0 = returnFunc(ctx, links, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []models.Link, string) error); ok {
		r1 = returnFunc(ctx, links, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinksStorage_AddLinkBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLinkBatch'
type MockLinksStorage_AddLinkBatch_Call struct {
	*mock.Call
}

// AddLinkBatch is a helper method to define mock.On call
//   - ctx
//   - links
//   - userID
func (_e *MockLinksStorage_Expecter) AddLinkBatch(ctx interface{}, links interface{}, userID interface{}) *MockLinksStorage_AddLinkBatch_Call {
	return &MockLinksStorage_AddLinkBatch_Call{Call: _e.mock.On("AddLinkBatch", ctx, links, userID)}
}

func (_c *MockLinksStorage_AddLinkBatch_Call) Run(run func(ctx context.Context, links []models.Link, userID string)) *MockLinksStorage_AddLinkBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Link), args[2].(string))
	})
	return _c
}

func (_c *MockLinksStorage_AddLinkBatch_Call) Return(links1 []models.Link, err error) *MockLinksStorage_AddLinkBatch_Call {
	_c.Call.Return(links1, err)
	return _c
}

func (_c *MockLinksStorage_AddLinkBatch_Call) RunAndReturn(run func(ctx context.Context, links []models.Link, userID string) ([]models.Link, error)) *MockLinksStorage_AddLinkBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLinksStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockLinksStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockLinksStorage_Expecter) Close() *MockLinksStorage_Close_Call {
	return &MockLinksStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockLinksStorage_Close_Call) Run(run func()) *MockLinksStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLinksStorage_Close_Call) Return(err error) *MockLinksStorage_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLinksStorage_Close_Call) RunAndReturn(run func() error) *MockLinksStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CountURLs provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) CountURLs(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountURLs")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockLinksStorage_CountURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountURLs'
type MockLinksStorage_CountURLs_Call struct {
	*mock.Call
}

// CountURLs is a helper method to define mock.On call
//   - ctx
func (_e *MockLinksStorage_Expecter) CountURLs(ctx interface{}) *MockLinksStorage_CountURLs_Call {
	return &MockLinksStorage_CountURLs_Call{Call: _e.mock.On("CountURLs", ctx)}
}

func (_c *MockLinksStorage_CountURLs_Call) Run(run func(ctx context.Context)) *MockLinksStorage_CountURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLinksStorage_CountURLs_Call) Return(n int) *MockLinksStorage_CountURLs_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockLinksStorage_CountURLs_Call) RunAndReturn(run func(ctx context.Context) int) *MockLinksStorage_CountURLs_Call {
	_c.Call.Return(run)
	return _c
}

// CountUsers provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) CountUsers(ctx context.Context) int {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountUsers")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockLinksStorage_CountUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUsers'
type MockLinksStorage_CountUsers_Call struct {
	*mock.Call
}

// CountUsers is a helper method to define mock.On call
//   - ctx
func (_e *MockLinksStorage_Expecter) CountUsers(ctx interface{}) *MockLinksStorage_CountUsers_Call {
	return &MockLinksStorage_CountUsers_Call{Call: _e.mock.On("CountUsers", ctx)}
}

func (_c *MockLinksStorage_CountUsers_Call) Run(run func(ctx context.Context)) *MockLinksStorage_CountUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLinksStorage_CountUsers_Call) Return(n int) *MockLinksStorage_CountUsers_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockLinksStorage_CountUsers_Call) RunAndReturn(run func(ctx context.Context) int) *MockLinksStorage_CountUsers_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserURLs provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) DeleteUserURLs(ctx context.Context, urls []DeletedURLs) error {
	ret := _mock.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserURLs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []DeletedURLs) error); ok {
		r0 = returnFunc(ctx, urls)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLinksStorage_DeleteUserURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserURLs'
type MockLinksStorage_DeleteUserURLs_Call struct {
	*mock.Call
}

// DeleteUserURLs is a helper method to define mock.On call
//   - ctx
//   - urls
func (_e *MockLinksStorage_Expecter) DeleteUserURLs(ctx interface{}, urls interface{}) *MockLinksStorage_DeleteUserURLs_Call {
	return &MockLinksStorage_DeleteUserURLs_Call{Call: _e.mock.On("DeleteUserURLs", ctx, urls)}
}

func (_c *MockLinksStorage_DeleteUserURLs_Call) Run(run func(ctx context.Context, urls []DeletedURLs)) *MockLinksStorage_DeleteUserURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]DeletedURLs))
	})
	return _c
}

func (_c *MockLinksStorage_DeleteUserURLs_Call) Return(err error) *MockLinksStorage_DeleteUserURLs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLinksStorage_DeleteUserURLs_Call) RunAndReturn(run func(ctx context.Context, urls []DeletedURLs) error) *MockLinksStorage_DeleteUserURLs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLink provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) GetLink(ctx context.Context, value string) (models.Link, error) {
	ret := _mock.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for GetLink")
	}

	var r0 models.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Link, error)); ok {
		return returnFunc(ctx, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Link); ok {
		r0 = returnFunc(ctx, value)
	} else {
		r0 = ret.Get(0).(models.Link)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinksStorage_GetLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLink'
type MockLinksStorage_GetLink_Call struct {
	*mock.Call
}

// GetLink is a helper method to define mock.On call
//   - ctx
//   - value
func (_e *MockLinksStorage_Expecter) GetLink(ctx interface{}, value interface{}) *MockLinksStorage_GetLink_Call {
	return &MockLinksStorage_GetLink_Call{Call: _e.mock.On("GetLink", ctx, value)}
}

func (_c *MockLinksStorage_GetLink_Call) Run(run func(ctx context.Context, value string)) *MockLinksStorage_GetLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLinksStorage_GetLink_Call) Return(link models.Link, err error) *MockLinksStorage_GetLink_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockLinksStorage_GetLink_Call) RunAndReturn(run func(ctx context.Context, value string) (models.Link, error)) *MockLinksStorage_GetLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserLinks provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) GetUserLinks(ctx context.Context, userID string) ([]models.Link, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLinks")
	}

	var r0 []models.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]models.Link, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []models.Link); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinksStorage_GetUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserLinks'
type MockLinksStorage_GetUserLinks_Call struct {
	*mock.Call
}

// GetUserLinks is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockLinksStorage_Expecter) GetUserLinks(ctx interface{}, userID interface{}) *MockLinksStorage_GetUserLinks_Call {
	return &MockLinksStorage_GetUserLinks_Call{Call: _e.mock.On("GetUserLinks", ctx, userID)}
}

func (_c *MockLinksStorage_GetUserLinks_Call) Run(run func(ctx context.Context, userID string)) *MockLinksStorage_GetUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLinksStorage_GetUserLinks_Call) Return(links []models.Link, err error) *MockLinksStorage_GetUserLinks_Call {
	_c.Call.Return(links, err)
	return _c
}

func (_c *MockLinksStorage_GetUserLinks_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]models.Link, error)) *MockLinksStorage_GetUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// InitStorage provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) InitStorage() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitStorage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLinksStorage_InitStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitStorage'
type MockLinksStorage_InitStorage_Call struct {
	*mock.Call
}

// InitStorage is a helper method to define mock.On call
func (_e *MockLinksStorage_Expecter) InitStorage() *MockLinksStorage_InitStorage_Call {
	return &MockLinksStorage_InitStorage_Call{Call: _e.mock.On("InitStorage")}
}

func (_c *MockLinksStorage_InitStorage_Call) Run(run func()) *MockLinksStorage_InitStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLinksStorage_InitStorage_Call) Return(err error) *MockLinksStorage_InitStorage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLinksStorage_InitStorage_Call) RunAndReturn(run func() error) *MockLinksStorage_InitStorage_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockLinksStorage
func (_mock *MockLinksStorage) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLinksStorage_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockLinksStorage_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx
func (_e *MockLinksStorage_Expecter) Ping(ctx interface{}) *MockLinksStorage_Ping_Call {
	return &MockLinksStorage_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockLinksStorage_Ping_Call) Run(run func(ctx context.Context)) *MockLinksStorage_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLinksStorage_Ping_Call) Return(err error) *MockLinksStorage_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLinksStorage_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockLinksStorage_Ping_Call {
	_c.Call.Return(run)
	return _c
}
